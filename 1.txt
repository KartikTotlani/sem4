#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 100

bool visited[MAX_VERTICES];
int graph[MAX_VERTICES][MAX_VERTICES];
int numVertices;

void initGraph(int vertices) {
    numVertices = vertices;
    for (int i = 0; i < numVertices; i++) {
        visited[i] = false;
        for (int j = 0; j < numVertices; j++) {
            graph[i][j] = 0;
        }
    }
}

void addEdge(int u, int v) {
    graph[u][v] = 1;
    graph[v][u] = 1;
}

void DFS(int vertex) {
    visited[vertex] = true;
    printf("%d ", vertex);
    for (int i = 0; i < numVertices; i++) {
        if (graph[vertex][i] && !visited[i]) {
            DFS(i);
        }
    }
}

void BFS(int vertex) {
    bool queue[MAX_VERTICES] = {0};
    int front = 0, rear = 0;
    queue[rear++] = vertex;
    visited[vertex] = true;
    printf("%d ", vertex);
    while (front < rear) {
        int current = queue[front++];
        for (int i = 0; i < numVertices; i++) {
            if (graph[current][i] && !visited[i]) {
                queue[rear++] = i;
                visited[i] = true;
                printf("%d ", i);
            }
        }
    }
}

int main() {
    int vertices, edges;
    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &vertices, &edges);
    initGraph(vertices);
    printf("Enter the edges (u v):\n");
    for (int i = 0; i < edges; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        addEdge(u, v);
    }
    printf("DFS Traversal: ");
    DFS(0);
    printf("\n");
    for (int i = 0; i < numVertices; i++) {
        visited[i] = false;
    }
    printf("BFS Traversal: ");
    BFS(0);
    printf("\n");
    return 0;
}
