
#include <stdio.h>
#include <stdbool.h>
#include <limits.h>
#define V 100 // Maximum number of vertices
int minDistance(int dist[], bool sptSet[], int vertices) {
int min = INT_MAX, min_index;
for (int v = 0; v < vertices; v++)
if (sptSet[v] == false && dist[v] <= min)
min = dist[v], min_index = v;
return min_index;
}
void printSolution(int dist[], int vertices) {
printf("Vertex Distance from Source\n");
for (int i = 0; i < vertices; i++)
printf("%d \t\t %d\n", i, dist[i]);
}
void dijkstra(int graph[V][V], int src, int vertices) {
int dist[V];
bool sptSet[V];
for (int i = 0; i < vertices; i++)
dist[i] = INT_MAX, sptSet[i] = false;
dist[src] = 0;
for (int count = 0; count < vertices - 1; count++) {
int u = minDistance(dist, sptSet, vertices);
sptSet[u] = true;
for (int v = 0; v < vertices; v++)
if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v])
dist[v] = dist[u] + graph[u][v];
}
printSolution(dist, vertices);
}
int main() {
int vertices;
printf("Enter the number of vertices: ");
scanf("%d", &vertices);
int graph[V][V];
printf("Enter the adjacency matrix (%d x %d):\n", vertices, vertices);
for (int i = 0; i < vertices; i++) {
for (int j = 0; j < vertices; j++) {
scanf("%d", &graph[i][j]);
}
}
int src;
printf("Enter the source vertex: ");
scanf("%d", &src);
dijkstra(graph, src, vertices);
return 0;
}
